mode(group)
mode(teams_df[,2])
class(teams_df[,2])
sapply(teams_df, class)
lapply(teams_df, class)
vapply(teams_df, class)
sapply(object, class)
sapply(object, mode)
sapply(object, class)
sapply(object, mode)
sapply(teams_df, mode)
lapply(object, class)
sapply(object, class)
lapply(object, mode)
sapply(object, mode)
lapply(object, mode)
G = matrix(1:9, nrow = 3)
G
class(G)
head(iris, n = 7)
tapply(iris$Sepal.Width, species, range)
class_mat = cbind(c(83, 71, 89), c(0.81, 0.95, 0.98), c(24, 30, 28))
rownames(class_mat) = c("English", "Math", "Art")
colnames(class_mat) = c("Avg_Score", "Attendence_Pct", "Num_Students")
data.frame(class_mat)
class_df = data.frame("class_Name" = c("English", "Math", "Art"),
"Avg_Score" = c(83, 71, 89),
"Attendence_Pct" = c(0.81, 0.95, 0.98),
"Num_Students" = c(24, 30, 28), stringsAsFactors = TRUE)
class_df[,-1]
class_df[,"Avg_Score", drop = FALSE]    # keeps
class_df[[1]]
class_df[c(FALSE, TRUE, TRUE, FALSE), ]
class_df[["Avg_Score"]][2]
class_df[class_df$Num_Students < 25,]        # returns whole rows
class_df$Avg_Score
with(class_df, Num_Students)
class_df$Num_Students < 25       # returns logical
with(class_df, art)
with(class_df, Art)
with(class_df, Num_Students)
with(class_df, Num_Students < 25)
with(class_df, {
Avg_Score_Ratio_Attendence = Avg_Score / Attendence_Pct
})
attach(class_df)
Avg_Score + 10
L[[2]][,1]
L[[4]]
L[[-1]]
L[[4]][[2]]   # element in the list in the list
L = list(1:10,
matrix(1:6, nrow = 3),
school_df,
list(1:5, matrix(1:9, nrow = 3)))
L[[2]][,1]
F = c(1,2,3,5,6)
class(F)
mode(F)
F = c(1:6)
class(F)
mode(F)
obj_1 <- list(
vec1 = 1:5,
vec2 = letters[1:3],
vec3 = rep(c(TRUE, FALSE), length = 3),
mat = matrix(1:9, nrow = 3),
df = data.frame(x = 1:3, y = letters[1:3])
)
obj_2 <- data.frame(
numeric_col = seq(0.5, 10.5, length = 5),
char_col = letters[1:5],
logical_col = rep(c(TRUE, FALSE), length = 5)
)
obj_2
class(obj_1)
class(obj_2)
sapply(obj_1, class)
sapply(obj_1, mode)
sapply(obj_2, class)
sapply(obj_2, mode)
lapply(obj_1, class)
lapply(obj_2, class)
lapply(obj_1, mode)
lapply(obj_2, mode)
sapply(obj_1, class)
sapply(obj_2, class)
sapply(obj_1, mode)
vapply(obj_1, class)
L[[c(4, 2, 3)]]
L$function = mean
L$Function = mean
names(L)
lapply(iris, length)    # returns list
sapply(iris, length)     # returns vector
sapply(iris, class)     # returns vector
sapply(obj_1, class)
sapply(L, class)     # returns vector
write.table(classes, "classes_513.txt")
oz = read.table("file", header = TRUE, sep = ",")
read.table(header = TRUE, sep = ",")
sapply(teams_df, class)
obj_1
obj_2 <- data.frame(
numeric_col = seq(0.5, 10.5, length = 5),
char_col = letters[1:5],
logical_col = rep(c(TRUE, FALSE), length = 5),
list2 = list(c(1:9), c(2:5))
obj_2 <- data.frame(
obj_2 <- data.frame(
list2 = list(c(1:9), c(2:5)),
numeric_col = seq(0.5, 10.5, length = 5),
char_col = letters[1:5],
logical_col = rep(c(TRUE, FALSE), length = 5)
)
obj_2 <- data.frame(
list2 = list(L = c(1:9), C = c(2:5)),
numeric_col = seq(0.5, 10.5, length = 5),
char_col = letters[1:5],
logical_col = rep(c(TRUE, FALSE), length = 5)
)
obj_2 <- data.frame(
numeric_col = seq(0.5, 10.5, length = 5),
char_col = letters[1:5],
logical_col = rep(c(TRUE, FALSE), length = 5),
list2 = list(L = c(1:9), C = c(2:5))
)
obj_2 <- data.frame(
numeric_col = seq(0.5, 10.5, length = 5),
char_col = letters[1:5],
logical_col = rep(c(TRUE, FALSE), length = 5),
list2 = list(c(1,2,3,4), c(6,8,7))
)
obj_2 <- data.frame(
numeric_col = seq(0.5, 10.5, length = 5),
char_col = letters[1:5],
logical_col = rep(c(TRUE, FALSE), length = 5),
list2 = list(c(1,2,3,4), c(6,8,7,4))
)
sapply(object, class)
logical_values = c(TRUE, FALSE, TRUE, FALSE,
FALSE, TRUE, FALSE, TRUE,
TRUE, FALSE, TRUE, FALSE)
mat = c(TRUE, FALSE, TRUE, FALSE,
FALSE, TRUE, FALSE, TRUE,
TRUE, FALSE, TRUE, FALSE)
dim(as.factor(mat))
L$Matrix2[,1]
L = list("Matrix2" = matrix(1:9, nrow = 3), "vec" = c(1:10))
L$Matrix2[,1]
L = list(c(1,2,3), c(1,2,3), list("Matrix2" = matrix(1:9, nrow = 3), "vec" = c(1:10)))
L$Matrix2[,1]
L$Matrix[c(1:3)]
my_list <- list(
Vector = 1:10,
Matrix = matrix(1:6, nrow = 2, ncol = 3),
Data_Frame = data.frame(
class_name = c("English", "Math", "Art"),
avg_score = c(88, 85, 94),
class_size = c(20, 24, 28)
),
List = list(
Vector2 = 1:5,
Matrix2 = matrix(1:9, nrow = 3, ncol = 3)
)
)
L <- list(
Vector = 1:10,
Matrix = matrix(1:6, nrow = 2, ncol = 3),
Data_Frame = data.frame(
class_name = c("English", "Math", "Art"),
avg_score = c(88, 85, 94),
class_size = c(20, 24, 28)
),
List = list(
Vector2 = 1:5,
Matrix2 = matrix(1:9, nrow = 3, ncol = 3)
)
)
L$Matrix[c(1:3)]
L$List(L$Matrix)
L$List(L$Matrix2)
L$List[L$Matrix2]
L$List[[L$Matrix2]]
L$ListL$Matrix2
L$List$Matrix2
L$List$Matrix2$1
L$List$Matrix2$one
L$List$Matrix2[,1]
L["List"][[2]][,1]
L["List"][[1]][,1]
L["List"][[1]]
L["List"][[1]][,1]
L["List"][[1]]["matrix2"][,1]
L["List"][[1]]["matrix2"][[,1]]
L["List"][[1]]["matrix2"][[1]][,1]
L["List"][[1]]
L["List"]["Matrix2"]
L["List"][[1]]["Matrix2"]
L["List"][[1]]["Matrix2"][[1]]
L["List"][[1]]["Matrix2"][[1]][,1]
L[[c(4,2,1)]]
L[[c(4,2,c(1:3))]]
L[[c(4,2,3]]
L[[c(4,2,3)]]
L[[c(4,2)]][,1]
tapply(iris$Sepal.Width, iris$Species, range)
tapply(Sepal.Width, Species, range)
tapply(iris$Sepal.Width, iris$Species, range)
tapply(iris$Sepal.Width, iris$Species, range)
gradebook_stats = function(x, operation = "average"){
if(operation != "average" && operation != "maximum"){
stop("operation must be average or maximum")
}
if(operation == "average"){
total_scores = apply(x, 2, function(x){
valid_vals = x[!is.na(x)]
mean(valid_vals)
})
}
if(operation == "maximum"){
total_scores = apply(x, 2, function(x){
valid_vals = x[!is.na(x)]
max(valid_vals)
})
}
round(total_scores, 2)
}
avg_scores_assignments = gradebook_stats(data = gradebook, operation = "average")
avg_scores_assignments = gradebook_stats(x = gradebook, operation = "average")
avg_scores_assignments
class(M)
class(L)
mode(L)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidytuesdayR")
install.packages("ggcorrplot")
library(ggcorrplot)
library(dplyr)
library(tidyr)
library(ggplot2)
tuesdata <- tidytuesdayR::tt_load('2024-02-13')
historical_spending <- tuesdata$historical_spending
gifts_age <- tuesdata$gifts_age
gifts_gender <- tuesdata$gifts_gender
tuesdata <- tidytuesdayR::tt_load('2024-02-13')
historical_spending <- tuesdata$historical_spending
gifts_age <- tuesdata$gifts_age
gifts_gender <- tuesdata$gifts_gender
# Rename columns in gifts_age and gifts_gender to avoid duplicates
gifts_age <- gifts_age %>%
rename_with(~paste0("age_", .), -Age)  # Prefix age_ to all columns except Age
gifts_gender <- gifts_gender %>%
rename_with(~paste0("gender_", .), -Gender)  # Prefix gender_ to all columns except Gender
# Perform cross-joins
# For historical spending and gifts by age
combined_age <- historical_spending %>%
crossing(gifts_age)
# For the combined dataset with gifts by gender
combined_all <- combined_age %>%
crossing(gifts_gender)
# View the final combined dataset
head(combined_all)
# Optionally, write the combined dataset to a CSV file
write.csv(combined_all, "combined_dataset.csv", row.names = FALSE)
write.csv(combined_all, "/Users/avaexelbirt/Downloads/combined_all.csv", row.names = FALSE)
#write.csv(combined_all, "/Users/avaexelbirt/Downloads/combined_all.csv", row.names = FALSE)
dim(combined_all)
head(combined_all)
# Remove duplicate observations
combined_data <- combined_all |>
distinct()
## Fix or remove typos or errors
# Example: Check for invalid ages (e.g., negative ages)
combined_data <- combined_data |>
filter(!is.na(Age) & Age != "" & Age > 0)
## Outliers: Identify and remove or cap outliers
# You can use IQR to detect outliers in numeric columns
numeric_columns <- c("PerPerson", "Candy", "Flowers", "Jewelry", "GreetingCards", "EveningOut", "Clothing", "GiftCards")
for (col in numeric_columns) {
Q1 <- quantile(combined_data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(combined_data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
combined_data <- combined_data |>
filter(combined_data[[col]] >= (Q1 - 1.5 * IQR) & combined_data[[col]] <= (Q3 + 1.5 * IQR))
}
# Visualize outliers for each numeric column
ggplot(combined_data, aes_string(x = col)) +
geom_boxplot(fill = "lightblue", color = "blue", outlier.color = "red") +
labs(title = paste("Boxplot of", col), x = col) +
theme_minimal()
## Missing values: Handle missing data
# Impute missing values for numeric columns with the median
combined_data <- combined_data |>
mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
# Handle missing values for categorical variables
categorical_columns <- c("Gender", "Age")  # Add any other categorical variables as needed
for (col in categorical_columns) {
mode_val <- as.character(names(sort(table(combined_data[[col]]), decreasing = TRUE)[1]))
combined_data[[col]] <- ifelse(is.na(combined_data[[col]]), mode_val, combined_data[[col]])
}
# Check the dimensions and summary of the cleaned data
dim(combined_data)
summary(combined_data)
# Final overview of the cleaned and preprocessed data
head(combined_data)
## Discretization of variables: Create age groups
combined_data <- combined_data |>
mutate(AgeGroup = case_when(
Age %in% c("18-24", "25-34") ~ "Young",
Age %in% c("35-44", "45-54") ~ "Middle-aged",
Age %in% c("55-64", "65") ~ "Old",
TRUE ~ "Other"
))
#Combination of Variables: Create New Features
combined_data <- combined_data %>%
mutate(
TotalGiftSpending = Candy + Flowers + Jewelry + GreetingCards + EveningOut + Clothing + GiftCards,
Candy_Flowers = Candy * Flowers,
Jewelry_Clothing = Jewelry * Clothing
)
## Normalization: Scale numeric variables (e.g., Min-Max normalization)
combined_data <- combined_data |>
mutate(across(all_of(numeric_columns), ~ (.-min(.)) / (max(.) - min(.))))
#Encode Categorical Variables
# Convert categorical variables to factors and then to dummy variables
combined_data <- combined_data %>%
mutate(
Gender = factor(Gender),
Age = factor(Age)
)
# Create dummy variables
combined_data_dummies <- combined_data %>%
select(-all_of(numeric_columns)) %>%
mutate(across(where(is.factor), ~ as.numeric(.))) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))  # Replace NA with 0
# Combine Scaled Numeric Features and Dummy Variables
final_data <- cbind(combined_data %>% select(all_of(numeric_columns)), combined_data_dummies)
#Check for Multicollinearity
# Select only numeric columns from final_data for correlation analysis
numeric_final_data <- final_data %>% select(where(is.numeric))
# Calculate the correlation matrix for the numeric features
cor_matrix <- cor(numeric_final_data, use = "pairwise.complete.obs")  # Handle NA values if present
# Optionally visualize the correlation matrix
ggcorrplot(cor_matrix, lab = TRUE)
# Plot histograms
for (col in numeric_columns) {
p <- ggplot(final_data, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
labs(title = paste("Distribution of", col), x = col, y = "Frequency") +
theme_minimal()
print(p)  # Print the plot
}
### 2. Boxplots to Identify Outliers
# Create boxplots for numeric variables
for (col in numeric_columns) {
p <- ggplot(final_data, aes_string(x = "factor(0)", y = col)) +
geom_boxplot(fill = "lightblue") +
labs(title = paste("Boxplot of", col), x = "", y = col) +
theme_minimal()
print(p)  # Print the plot
}
### 3. Count of Age Groups
# Bar plot for Age Group distribution
p_age_group <- ggplot(final_data, aes(x = AgeGroup)) +
geom_bar(fill = "coral") +
labs(title = "Count of Age Groups", x = "Age Group", y = "Count") +
theme_minimal()
print(p_age_group)
### 4. Gender Distribution
# Bar plot for Gender distribution
p_gender <- ggplot(final_data, aes(x = Gender)) +
geom_bar(fill = "lightgreen") +
labs(title = "Gender Distribution", x = "Gender", y = "Count") +
theme_minimal()
print(p_gender)
### 5. Pairwise Scatter Plots
# Create a pairs plot for numeric variables
pairs_plot <- pairs(final_data[numeric_columns],
main = "Pairwise Scatter Plots",
pch = 19,
col = rgb(0, 0, 1, alpha = 0.5))
### 6. Correlation Heatmap
# Calculate the correlation matrix
cor_matrix <- cor(final_data[numeric_columns], use = "pairwise.complete.obs")
ggcorrplot(cor_matrix, lab = TRUE, title = "Correlation Heatmap")
ggplot(final_data, aes(x = Gender, y = PerPerson)) +
geom_boxplot(fill = "pink") +
labs(title = "Per Person Spending by Gender", x = "Gender", y = "Spending Per Person")
ggplot(final_data, aes(x = PerPerson)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black") +
labs(title = "Distribution of Spending Amounts", x = "Spending Amount", y = "Frequency")
ggplot(final_data, aes(x = PerPerson)) +
geom_density(fill = "red", alpha = 0.5) +
labs(title = "Density of Spending Amounts", x = "Spending Amount", y = "Density")
ggplot(final_data, aes(x = Year, y = PerPerson)) +
geom_line() +
labs(title = "Trends in Spending Over Time", x = "Year", y = "Spending Amount")
# Visualize distribution of spending per person
ggplot(final_data, aes(x = PerPerson)) +
geom_histogram(binwidth = 10, fill = "pink", color = "black") +
labs(title = "Distribution of Spending per Person",
x = "Spending per Person ($)",
y = "Frequency") +
theme_minimal()
# Boxplot of spending per person by gender
ggplot(final_data, aes(x = Gender, y = PerPerson, fill = Gender)) +
geom_boxplot() +
labs(title = "Spending per Person by Gender",
x = "Gender",
y = "Spending per Person ($)") +
theme_minimal()
# Bar plot for average spending on gifts by gender
avg_spending_gender <- final_data %>%
group_by(Gender) %>%
summarise(across(starts_with("gender_"), mean, na.rm = TRUE), .groups = 'drop')
View(final_data)
# Remove duplicate observations
combined_data <- combined_all |>
distinct()
## Fix or remove typos or errors
# Example: Check for invalid ages (e.g., negative ages)
combined_data <- combined_data |>
filter(!is.na(Age) & Age != "" & Age > 0)
## Outliers: Identify and remove or cap outliers
# You can use IQR to detect outliers in numeric columns
numeric_columns <- c("PerPerson", "Candy", "Flowers", "Jewelry", "GreetingCards", "EveningOut", "Clothing", "GiftCards")
for (col in numeric_columns) {
Q1 <- quantile(combined_data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(combined_data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
combined_data <- combined_data |>
filter(combined_data[[col]] >= (Q1 - 1.5 * IQR) & combined_data[[col]] <= (Q3 + 1.5 * IQR))
}
# Visualize outliers for each numeric column
ggplot(combined_data, aes_string(x = col)) +
geom_boxplot(fill = "lightblue", color = "blue", outlier.color = "red") +
labs(title = paste("Boxplot of", col), x = col) +
theme_minimal()
## Missing values: Handle missing data
# Impute missing values for numeric columns with the median
combined_data <- combined_data |>
mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
# Handle missing values for categorical variables
categorical_columns <- c("Gender", "Age")  # Add any other categorical variables as needed
for (col in categorical_columns) {
mode_val <- as.character(names(sort(table(combined_data[[col]]), decreasing = TRUE)[1]))
combined_data[[col]] <- ifelse(is.na(combined_data[[col]]), mode_val, combined_data[[col]])
}
# Check the dimensions and summary of the cleaned data
dim(combined_data)
summary(combined_data)
# Final overview of the cleaned and preprocessed data
head(combined_data)
# Assuming the data is stored in a data frame 'df'
# For example:
# df <- read.csv("your_data.csv")
# Function to generate random data similar to the original data
generate_random_data <- function(final_data, n = 2500) {
full_df <- final_data %>%
summarise(across(everything(), ~ sample(.x, n, replace = TRUE)))
return(full_df)
}
# Generating 1000 new rows
set.seed(123)  # For reproducibility
new_rows <- generate_random_data(final_data, n = 2500)
# View the first few rows of the new data
head(new_rows)
# Optionally, you can combine the original data and the new rows:
FINAL <- rbind(final_data, new_rows)
# View the combined data
head(FINAL)
View(FINAL)
View(gifts_age)
View(gifts_gender)
View(historical_spending)
setwd("/Users/samreade/stat-learning")
setwd("/Users/samreade/stat-learning")
cd stat-learning
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidytuesdayR")
install.packages("ggcorrplot")
library(ggcorrplot)
library(dplyr)
library(tidyr)
library(ggplot2)
install.packages("ggcorrplot")
install.packages("tidytuesdayR")
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidytuesdayR")
install.packages("ggcorrplot")
library(ggcorrplot)
library(dplyr)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidytuesdayR")
install.packages("ggcorrplot")
library(ggcorrplot)
library(dplyr)
library(tidyr)
library(ggplot2)
Rent_df <- tidytuesdayR::tt_load('2022-07-05')
setwd("/Users/samreade/stat-learning")
Rent = Rent_df$rent
Permits = Rent_df$sf_permits
Construction = Rent_df$new_construction
View(Construction)
View(Rent)
View(Permits)
